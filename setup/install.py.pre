#!/usr/bin/env python
# -*- coding: utf-8 -*-


def main():
    print('''
    @<<:USER_NAME>>'s
                                ███████╗██╗██╗     ███████╗███████╗
    ██████╗  █████╗ ████████╗██╔════╝██║██║     ██╔════╝██╔════╝
    ██╔══██╗██╔══██╗╚══██╔══╝█████╗  ██║██║     █████╗  ███████╗
    ██║  ██║██║  ██║   ██║   ██╔══╝  ██║██║     ██╔══╝  ╚════██║
    ██████╔╝╚█████╔╝   ██║   ██║     ██║███████╗███████╗███████║
    ╚═════╝  ╚═════╝   ╚═╝   ╚═╝     ╚═╝╚══════╝╚══════╝╚══════╝

    https://<<:REPO_ADDR>>/
    ''')

    import argparse
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-f', '--force', action="store_true", default=False,
                        help='If specified, it will override existing symbolic links')
    parser.add_argument('--vim-plug', default='update', choices=['update', 'install', 'none'],
                        help='vim plugins: update and install (default), install only, or do nothing')
    parser.add_argument('--skip-zplug', action='store_true')
    args = parser.parse_args()

################# BEGIN OF FIXME #################

# Task Definition
# (path of target symlink) : (location of source file in the repository)

    from config import get_tasks, get_post_actions

    tasks = get_tasks()
    post_actions = get_post_actions(args)

################# END OF FIXME #################


    import os
    import sys
    import subprocess

    from signal import signal, SIGPIPE, SIG_DFL

    from python.setup_python import setup as setup_python

    from build_utils import get_machine_specific_opts, log, check_machine_type, check_not_exist, GRAY, RED, GREEN, YELLOW, CYAN, BLUE


# get current directory (absolute path)
    current_dir = os.path.abspath(os.path.dirname(__file__))
    os.chdir(current_dir)

# check if git submodules are loaded properly
    stat = subprocess.check_output("git submodule status --recursive",
                                shell=True, universal_newlines=True)
    submodule_issues = [(l.split()[1], l[0]) for l in stat.split('\n') if len(l) and l[0] != ' ']

    if submodule_issues:
        stat_messages = {'+': 'needs update', '-': 'not initialized', 'U': 'conflict!'}
        for (submodule_name, submodule_stat) in submodule_issues:
            log(RED("git submodule {name} : {status}".format(
                name=submodule_name,
                status=stat_messages.get(submodule_stat, '(Unknown)'))))
        log(RED(" you may run: $ git submodule update --init --recursive"))

        log("")
        log(YELLOW("Do you want to update submodules? (y/n) "), cr=False)
        shall_we = (raw_input().lower() == 'y')
        if shall_we:
            git_submodule_update_cmd = 'git submodule update --init --recursive'
            # git 2.8+ supports parallel submodule fetching
            try:
                git_version = str(subprocess.check_output("""git --version | awk '{print $3}'""", shell=True))
                if git_version >= '2.8': git_submodule_update_cmd += ' --jobs 8'
            except Exception as e:
                pass
            log("Running: %s" % BLUE(git_submodule_update_cmd))
            subprocess.call(git_submodule_update_cmd, shell=True)
        else:
            log(RED("Aborted."))
            sys.exit(1)

    mtype = check_machine_type()
    tasks = get_machine_specific_opts(current_dir, mtype, tasks)

    for target, source in sorted(tasks.items()):
        # normalize paths
        source = os.path.join(current_dir, os.path.expanduser(source))
        target = os.path.expanduser(target)

        # if --force option is given, delete and override the previous symlink
        if os.path.lexists(target):
            is_broken_link = os.path.islink(target) and not os.path.exists(os.readlink(target))

            if check_not_exist(source):
                continue

            if args.force or is_broken_link:
                if os.path.islink(target):
                    os.unlink(target)
                else:
                    log("{:50s} : {}".format(
                        BLUE(target),
                        YELLOW("already exists but not a symbolic link; --force option ignored")
                    ))
            else:
                log("{:50s} : {}".format(
                    BLUE(target),
                    GRAY("already exists, skipped")
                ))

        # make a symbolic link if available
        if not os.path.lexists(target):
            try:
                mkdir_target = os.path.split(target)[0]
                os.makedirs(mkdir_target)
                log(GREEN('Created directory : %s' % mkdir_target))
            except:
                pass
            os.symlink(source, target)
            log("{:50s} : {}".format(
                BLUE(target),
                GREEN("symlink created from '%s'" % source)
            ))

    for action in post_actions:
        if not action:
            continue
        log(CYAN('Executing: ') + action.strip().split('\n')[0])
        subprocess.call(['bash', '-c', action],
                        preexec_fn=lambda: signal(SIGPIPE, SIG_DFL))

    setup_python(mtype, current_dir)

    log("\n" + GREEN("Done! "), cr=False)
    log(GRAY("Please restart shell (e.g. `exec zsh`) if necessary\n"))
